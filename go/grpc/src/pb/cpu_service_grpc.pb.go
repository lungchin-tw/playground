// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.22.2
// source: cpu_service.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CPUServiceClient is the client API for CPUService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CPUServiceClient interface {
	CreateProcessor(ctx context.Context, in *CreateProcessorRequest, opts ...grpc.CallOption) (*CreateProcessorResponse, error)
	Query(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (CPUService_QueryClient, error)
	UploadImage(ctx context.Context, opts ...grpc.CallOption) (CPUService_UploadImageClient, error)
	Bidirectional(ctx context.Context, opts ...grpc.CallOption) (CPUService_BidirectionalClient, error)
	DemoPermission(ctx context.Context, in *DemoPermissionRequest, opts ...grpc.CallOption) (*DemoPermissionResponse, error)
	DemoTokenPermission(ctx context.Context, in *DemoPermissionRequest, opts ...grpc.CallOption) (*DemoPermissionResponse, error)
}

type cPUServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCPUServiceClient(cc grpc.ClientConnInterface) CPUServiceClient {
	return &cPUServiceClient{cc}
}

func (c *cPUServiceClient) CreateProcessor(ctx context.Context, in *CreateProcessorRequest, opts ...grpc.CallOption) (*CreateProcessorResponse, error) {
	out := new(CreateProcessorResponse)
	err := c.cc.Invoke(ctx, "/CPUService/CreateProcessor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cPUServiceClient) Query(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (CPUService_QueryClient, error) {
	stream, err := c.cc.NewStream(ctx, &CPUService_ServiceDesc.Streams[0], "/CPUService/Query", opts...)
	if err != nil {
		return nil, err
	}
	x := &cPUServiceQueryClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CPUService_QueryClient interface {
	Recv() (*QueryResponse, error)
	grpc.ClientStream
}

type cPUServiceQueryClient struct {
	grpc.ClientStream
}

func (x *cPUServiceQueryClient) Recv() (*QueryResponse, error) {
	m := new(QueryResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *cPUServiceClient) UploadImage(ctx context.Context, opts ...grpc.CallOption) (CPUService_UploadImageClient, error) {
	stream, err := c.cc.NewStream(ctx, &CPUService_ServiceDesc.Streams[1], "/CPUService/UploadImage", opts...)
	if err != nil {
		return nil, err
	}
	x := &cPUServiceUploadImageClient{stream}
	return x, nil
}

type CPUService_UploadImageClient interface {
	Send(*UploadImageRequest) error
	CloseAndRecv() (*UploadImageResponse, error)
	grpc.ClientStream
}

type cPUServiceUploadImageClient struct {
	grpc.ClientStream
}

func (x *cPUServiceUploadImageClient) Send(m *UploadImageRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *cPUServiceUploadImageClient) CloseAndRecv() (*UploadImageResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(UploadImageResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *cPUServiceClient) Bidirectional(ctx context.Context, opts ...grpc.CallOption) (CPUService_BidirectionalClient, error) {
	stream, err := c.cc.NewStream(ctx, &CPUService_ServiceDesc.Streams[2], "/CPUService/Bidirectional", opts...)
	if err != nil {
		return nil, err
	}
	x := &cPUServiceBidirectionalClient{stream}
	return x, nil
}

type CPUService_BidirectionalClient interface {
	Send(*BidirectionalRequest) error
	Recv() (*BidirectionalResponse, error)
	grpc.ClientStream
}

type cPUServiceBidirectionalClient struct {
	grpc.ClientStream
}

func (x *cPUServiceBidirectionalClient) Send(m *BidirectionalRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *cPUServiceBidirectionalClient) Recv() (*BidirectionalResponse, error) {
	m := new(BidirectionalResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *cPUServiceClient) DemoPermission(ctx context.Context, in *DemoPermissionRequest, opts ...grpc.CallOption) (*DemoPermissionResponse, error) {
	out := new(DemoPermissionResponse)
	err := c.cc.Invoke(ctx, "/CPUService/DemoPermission", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cPUServiceClient) DemoTokenPermission(ctx context.Context, in *DemoPermissionRequest, opts ...grpc.CallOption) (*DemoPermissionResponse, error) {
	out := new(DemoPermissionResponse)
	err := c.cc.Invoke(ctx, "/CPUService/DemoTokenPermission", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CPUServiceServer is the server API for CPUService service.
// All implementations must embed UnimplementedCPUServiceServer
// for forward compatibility
type CPUServiceServer interface {
	CreateProcessor(context.Context, *CreateProcessorRequest) (*CreateProcessorResponse, error)
	Query(*QueryRequest, CPUService_QueryServer) error
	UploadImage(CPUService_UploadImageServer) error
	Bidirectional(CPUService_BidirectionalServer) error
	DemoPermission(context.Context, *DemoPermissionRequest) (*DemoPermissionResponse, error)
	DemoTokenPermission(context.Context, *DemoPermissionRequest) (*DemoPermissionResponse, error)
	mustEmbedUnimplementedCPUServiceServer()
}

// UnimplementedCPUServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCPUServiceServer struct {
}

func (UnimplementedCPUServiceServer) CreateProcessor(context.Context, *CreateProcessorRequest) (*CreateProcessorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProcessor not implemented")
}
func (UnimplementedCPUServiceServer) Query(*QueryRequest, CPUService_QueryServer) error {
	return status.Errorf(codes.Unimplemented, "method Query not implemented")
}
func (UnimplementedCPUServiceServer) UploadImage(CPUService_UploadImageServer) error {
	return status.Errorf(codes.Unimplemented, "method UploadImage not implemented")
}
func (UnimplementedCPUServiceServer) Bidirectional(CPUService_BidirectionalServer) error {
	return status.Errorf(codes.Unimplemented, "method Bidirectional not implemented")
}
func (UnimplementedCPUServiceServer) DemoPermission(context.Context, *DemoPermissionRequest) (*DemoPermissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DemoPermission not implemented")
}
func (UnimplementedCPUServiceServer) DemoTokenPermission(context.Context, *DemoPermissionRequest) (*DemoPermissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DemoTokenPermission not implemented")
}
func (UnimplementedCPUServiceServer) mustEmbedUnimplementedCPUServiceServer() {}

// UnsafeCPUServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CPUServiceServer will
// result in compilation errors.
type UnsafeCPUServiceServer interface {
	mustEmbedUnimplementedCPUServiceServer()
}

func RegisterCPUServiceServer(s grpc.ServiceRegistrar, srv CPUServiceServer) {
	s.RegisterService(&CPUService_ServiceDesc, srv)
}

func _CPUService_CreateProcessor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProcessorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CPUServiceServer).CreateProcessor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CPUService/CreateProcessor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CPUServiceServer).CreateProcessor(ctx, req.(*CreateProcessorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CPUService_Query_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(QueryRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CPUServiceServer).Query(m, &cPUServiceQueryServer{stream})
}

type CPUService_QueryServer interface {
	Send(*QueryResponse) error
	grpc.ServerStream
}

type cPUServiceQueryServer struct {
	grpc.ServerStream
}

func (x *cPUServiceQueryServer) Send(m *QueryResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _CPUService_UploadImage_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CPUServiceServer).UploadImage(&cPUServiceUploadImageServer{stream})
}

type CPUService_UploadImageServer interface {
	SendAndClose(*UploadImageResponse) error
	Recv() (*UploadImageRequest, error)
	grpc.ServerStream
}

type cPUServiceUploadImageServer struct {
	grpc.ServerStream
}

func (x *cPUServiceUploadImageServer) SendAndClose(m *UploadImageResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *cPUServiceUploadImageServer) Recv() (*UploadImageRequest, error) {
	m := new(UploadImageRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _CPUService_Bidirectional_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CPUServiceServer).Bidirectional(&cPUServiceBidirectionalServer{stream})
}

type CPUService_BidirectionalServer interface {
	Send(*BidirectionalResponse) error
	Recv() (*BidirectionalRequest, error)
	grpc.ServerStream
}

type cPUServiceBidirectionalServer struct {
	grpc.ServerStream
}

func (x *cPUServiceBidirectionalServer) Send(m *BidirectionalResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *cPUServiceBidirectionalServer) Recv() (*BidirectionalRequest, error) {
	m := new(BidirectionalRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _CPUService_DemoPermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DemoPermissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CPUServiceServer).DemoPermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CPUService/DemoPermission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CPUServiceServer).DemoPermission(ctx, req.(*DemoPermissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CPUService_DemoTokenPermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DemoPermissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CPUServiceServer).DemoTokenPermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CPUService/DemoTokenPermission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CPUServiceServer).DemoTokenPermission(ctx, req.(*DemoPermissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CPUService_ServiceDesc is the grpc.ServiceDesc for CPUService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CPUService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "CPUService",
	HandlerType: (*CPUServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateProcessor",
			Handler:    _CPUService_CreateProcessor_Handler,
		},
		{
			MethodName: "DemoPermission",
			Handler:    _CPUService_DemoPermission_Handler,
		},
		{
			MethodName: "DemoTokenPermission",
			Handler:    _CPUService_DemoTokenPermission_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Query",
			Handler:       _CPUService_Query_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "UploadImage",
			Handler:       _CPUService_UploadImage_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Bidirectional",
			Handler:       _CPUService_Bidirectional_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "cpu_service.proto",
}
